347. Top K Frequent Elements
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Approach 1:
    we create a frequency map first, then we have a class called Pair, with fields
    value and frequency, it also implements comparable interface
    now, we create a maxHeap of type Pair, to store the pair objects
    basically to have the highest frequency element at top and so on

    now for k times we poll the maxHeap and return the ans

many optimisations can be done
like we can build the heap using heapify to reduce the tc to O(n)

also we can use bucket sort also and many other optimisation
