In ASCII, '0' == 48, '1' == 49, and so on. Thus, '0' - 48 == 0, '1' - 48 == 1, and so on. That is, subtracting by 48 translates the char values '0'..'9' to the int values 0..9.

Thus, precisely because '0' == 48, the code will also work with:

sum += s[i] - '0';
The intention is perhaps slightly more clear in this version.

You can of course do the "reverse" mapping by addition, e.g. 5 + '0' == '5'. Similarly, if you have a char containing a letter in 'A'..'Z' range, you can "subtract" 'A' from it to get the index of that letter in the 0..25 range.

Approach 1: BFA given as solution, we traverse from front to end
Approach 2: here the optimisation done is we traverse from back rather than from front, so the tc is better

1903. Largest Odd Number in String
You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

if the whole string itself is odd, then it will be the largest odd number

Given nnn as the length of num,

Time complexity: O(n)

In the worst-case scenario, we iterate over every character in num, performing O(1)O(1)O(1) work at each iteration.

Space complexity: O(1)

We aren't using any extra space. We don't count the answer as part of the space complexity.

